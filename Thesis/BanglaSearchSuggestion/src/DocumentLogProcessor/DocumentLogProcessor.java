/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package DocumentLogProcessor;

import java.awt.Font;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;

/**
 *
 * @author Attoprottoyee!6
 */
public class DocumentLogProcessor extends javax.swing.JFrame
{
    
    public DocumentLogProcessor()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        textfield = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayarea = new javax.swing.JTextArea();
        upload = new javax.swing.JButton();
        corpus = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        Font font = new Font("SolaimanLipi", Font.PLAIN, 14);
        textfield.setFont(font);
        textfield.getDocument().addDocumentListener(new MyDocumentListener());
        textfield.getDocument().putProperty("name", "Text Field");

        displayarea.setEditable(false);
        displayarea.setColumns(20);
        displayarea.setRows(5);
        jScrollPane2.setViewportView(displayarea);
        displayarea.setFont(font);

        upload.setText("Upload");
        upload.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                uploadActionPerformed(evt);
            }
        });

        corpus.setText("Add to MainCorpus");
        corpus.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                corpusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(upload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(corpus, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                    .addComponent(textfield))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(upload, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(corpus, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void uploadActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_uploadActionPerformed
    {//GEN-HEADEREND:event_uploadActionPerformed
       JFileChooser fc = new JFileChooser(lastfile);
       int returnVal = fc.showOpenDialog(this); //Where frame is the parent component

       
       if (returnVal == JFileChooser.APPROVE_OPTION) {
            lastfile = fc.getSelectedFile();
           try
           {
               SuffixAutomataNode.root.updateCorpus(lastfile.getCanonicalPath());
           }
           catch (IOException ex)
           {
               Logger.getLogger(DocumentLogProcessor.class.getName()).log(Level.SEVERE, null, ex);
           }
      }  
    }//GEN-LAST:event_uploadActionPerformed

    private void corpusActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_corpusActionPerformed
    {//GEN-HEADEREND:event_corpusActionPerformed
        JFileChooser fc = new JFileChooser(lastfile);
        fc.setMultiSelectionEnabled(true);
        int returnVal = fc.showOpenDialog(this); //Where frame is the parent component

       
       if (returnVal == JFileChooser.APPROVE_OPTION) {
            File files[] = fc.getSelectedFiles();
           try
           {
                FileWriter fw = new FileWriter(SuffixAutomataNode.RootPath+"Corpus.txt",true);
                BufferedWriter bw = new BufferedWriter(fw);
                for(int i=0;i<files.length;i++)
                {
                    FileReader file=new FileReader(files[i].getCanonicalPath());
                    BufferedReader input=new BufferedReader(file); //reading from file as characters
                    while(true)
                    {
                        String str=input.readLine();
                        if(str==null) break;
                        bw.write(str);
                    }
                }              
                bw.close();
               
                fw = new FileWriter(SuffixAutomataNode.RootPath+"DocumentList.txt",true);
                bw = new BufferedWriter(fw);
                for(int i=0;i<files.length;i++)  
                {
                    System.out.println(files[i].getCanonicalFile());
                    bw.write(files[i].getCanonicalPath()+"\n");
                }
               bw.close();
           }
           catch (IOException ex)
           {
               Logger.getLogger(DocumentLogProcessor.class.getName()).log(Level.SEVERE, null, ex);
           }
       }  
    }//GEN-LAST:event_corpusActionPerformed

    class MyDocumentListener implements DocumentListener {
    String newline = "\n";
 
    public void insertUpdate(DocumentEvent e) {
        updateLog(e, "inserted into");
    }
    public void removeUpdate(DocumentEvent e) {
        updateLog(e, "removed from");
    }
    public void changedUpdate(DocumentEvent e) {
        //Plain text components do not fire these events
    }
    
      public void updateLog(DocumentEvent e, String action) {
        displayText();
    }
      
    }
    
    private void displayText()
    {
         displayarea.setText("");
         String str=textfield.getText();
         //System.out.println(str);
         if(str.length()==0) return;
         if(str==" ") return;
         if(str==null) return;
         SuffixAutomataNode.root.getSuggestion(str,null);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
         long heapSize = Runtime.getRuntime().totalMemory();
         
        //Print the jvm heap size.
        System.out.println("Heap Size = " + heapSize);
        try
        {
            //preprocess all the things
            new SuffixAutomataNode().preProcess();
        }
        catch (IOException ex)
        {
            Logger.getLogger(DocumentLogProcessor.class.getName()).log(Level.SEVERE, null, ex);
        }
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(DocumentLogProcessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(DocumentLogProcessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(DocumentLogProcessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(DocumentLogProcessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
         
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new DocumentLogProcessor().setVisible(true);
            }
        });        
         
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton corpus;
    static javax.swing.JTextArea displayarea;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField textfield;
    private javax.swing.JButton upload;
    // End of variables declaration//GEN-END:variables
   File lastfile=new File(SuffixAutomataNode.RootPath+"Bangla Corpus version12.05.08");
}
